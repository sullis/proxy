/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.82
 * apibuilder:0.12.61 https://app.apibuilder.io/flow/session/0.3.82/play_2_6_client
 */
package io.flow.session.v0.models {

  sealed trait Session extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type Session
   */
  sealed trait SessionDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object SessionDiscriminator {

    case object OrganizationSession extends SessionDiscriminator { override def toString = "organization_session" }

    case class UNDEFINED(override val toString: String) extends SessionDiscriminator

    val all: scala.List[SessionDiscriminator] = scala.List(OrganizationSession)

    private[this] val byName: Map[String, SessionDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SessionDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SessionDiscriminator] = byName.get(value.toLowerCase)

  }

  sealed trait SessionAuthorization extends _root_.scala.Product with _root_.scala.Serializable

  /**
   * Defines the valid discriminator values for the type SessionAuthorization
   */
  sealed trait SessionAuthorizationDiscriminator extends _root_.scala.Product with _root_.scala.Serializable

  object SessionAuthorizationDiscriminator {

    case object OrganizationSessionAuthorization extends SessionAuthorizationDiscriminator { override def toString = "organization_session_authorization" }

    case class UNDEFINED(override val toString: String) extends SessionAuthorizationDiscriminator

    val all: scala.List[SessionAuthorizationDiscriminator] = scala.List(OrganizationSessionAuthorization)

    private[this] val byName: Map[String, SessionAuthorizationDiscriminator] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SessionAuthorizationDiscriminator = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SessionAuthorizationDiscriminator] = byName.get(value.toLowerCase)

  }

  /**
   * @param id Equivalent of the cart token
   */
  case class CartReference(
    id: String
  )

  /**
   * If we found an experience for the given session, the localized information will
   * be presented here
   */
  @deprecated("Going forward, use session.geo and session.experience directly") case class LocalSession(
    country: io.flow.reference.v0.models.Country,
    currency: io.flow.reference.v0.models.Currency,
    language: io.flow.reference.v0.models.Language,
    locale: io.flow.reference.v0.models.Locale
  )

  /**
   * Represents a session created for an organization. Primary method to select an
   * experience for a given user session and ensure that experience does not change
   * throughout the user's activity. Provides authentication to objects created
   * during this session (e.g. order).
   * 
   * @param environment The Flow organization environment
   * @param ip The latest IP Address associated with this session, if known
   * @param geo The geolocated information for this particular session. Note will always be
   *        present. Marked optional for backwards compatibility
   * @param experience Present if the session maps to an enabled experience
   */
  case class OrganizationSession(
    id: String,
    organization: String,
    visitor: io.flow.session.v0.models.SessionVisitor,
    visit: io.flow.session.v0.models.SessionVisit,
    environment: io.flow.common.v0.models.Environment,
    attributes: Map[String, String],
    ip: _root_.scala.Option[String] = None,
    local: _root_.scala.Option[io.flow.session.v0.models.LocalSession] = None,
    geo: _root_.scala.Option[io.flow.session.v0.models.SessionGeo] = None
  ) extends Session

  /**
   * Represents a session authorized access to the specified organization's data
   */
  case class OrganizationSessionAuthorization(
    organization: io.flow.common.v0.models.OrganizationReference,
    environment: io.flow.common.v0.models.Environment
  ) extends SessionAuthorization

  /**
   * Authorize a request using a session id
   * 
   * @param session The session Id
   */
  case class SessionAuthorizationForm(
    session: String
  )

  /**
   * Configures session expiration time. We default to 30 minutes to follow Google
   * Analytics
   */
  case class SessionExpirationConfig(
    unit: io.flow.common.v0.models.UnitOfTime = io.flow.common.v0.models.UnitOfTime.Minute,
    value: Long = 30
  )

  /**
   * @param ip If specified, we will geolocate the user by this IP address, and if successful,
   *        select the experience matching the country of the IP address.
   * @param experience If specified, we will render the items in the context of the experience with
   *        this key.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   *        If specified, translate the pricing to this currency. Translation occurs using
   *        the current spot rate for this currency from the base currency in the
   *        experience.
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages If
   *        specified, translate content to this language (where available)
   * @param locale Locale ID as defined in https://api.flow.io/reference/locales
   */
  case class SessionForm(
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None,
    locale: _root_.scala.Option[String] = None,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  /**
   * The geolocated information for this session
   */
  case class SessionGeo(
    country: io.flow.reference.v0.models.Country,
    currency: io.flow.reference.v0.models.Currency,
    language: io.flow.reference.v0.models.Language,
    locale: io.flow.reference.v0.models.Locale
  )

  /**
   * @param ip If specified, we will geolocate the user by this IP address, and if successful,
   *        select the experience matching the country of the IP address.
   * @param experience If specified, we will render the items in the context of the experience with
   *        this key.
   * @param country The ISO 3166-3 country code. Case insensitive. See
   *        https://api.flow.io/reference/countries
   * @param currency Iso 4217 3 currency code as defined in https://api.flow.io/reference/currencies
   *        If specified, translate the pricing to this currency. Translation occurs using
   *        the current spot rate for this currency from the base currency in the
   *        experience.
   * @param language ISO 639 2 language code as defined in https://api.flow.io/reference/languages If
   *        specified, translate content to this language (where available)
   * @param locale Locale ID as defined in https://api.flow.io/reference/locales
   */
  case class SessionPutForm(
    ip: _root_.scala.Option[String] = None,
    experience: _root_.scala.Option[String] = None,
    country: _root_.scala.Option[String] = None,
    currency: _root_.scala.Option[String] = None,
    language: _root_.scala.Option[String] = None,
    locale: _root_.scala.Option[String] = None,
    attributes: _root_.scala.Option[Map[String, String]] = None
  )

  /**
   * A session visit expires after a configurable period of inactivity (e.g. 30
   * minutes).
   * 
   * @param expiresAt The date / time on which this visit expires. The default session duration may
   *        vary by organization.
   */
  case class SessionVisit(
    id: String,
    expiresAt: _root_.org.joda.time.DateTime
  )

  /**
   * A session visitor is a unique identifier for our best guess as to who the
   * individual user is interacting with Flow.
   */
  case class SessionVisitor(
    id: String
  )

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union Session, it will need to be handled in the client code. This
   * implementation will deserialize these future types as an instance of this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class SessionUndefinedType(
    description: String
  ) extends Session

  /**
   * Provides future compatibility in clients - in the future, when a type is added
   * to the union SessionAuthorization, it will need to be handled in the client
   * code. This implementation will deserialize these future types as an instance of
   * this class.
   * 
   * @param description Information about the type that we received that is undefined in this version of
   *        the client.
   */
  case class SessionAuthorizationUndefinedType(
    description: String
  ) extends SessionAuthorization

}

package io.flow.session.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit def jsonReadsSessionCartReference: play.api.libs.json.Reads[CartReference] = {
      (__ \ "id").read[String].map { x => new CartReference(id = x) }
    }

    def jsObjectCartReference(obj: io.flow.session.v0.models.CartReference): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesSessionCartReference: play.api.libs.json.Writes[CartReference] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.CartReference] {
        def writes(obj: io.flow.session.v0.models.CartReference) = {
          jsObjectCartReference(obj)
        }
      }
    }

    implicit def jsonReadsSessionLocalSession: play.api.libs.json.Reads[LocalSession] = {
      (
        (__ \ "country").read[io.flow.reference.v0.models.Country] and
        (__ \ "currency").read[io.flow.reference.v0.models.Currency] and
        (__ \ "language").read[io.flow.reference.v0.models.Language] and
        (__ \ "locale").read[io.flow.reference.v0.models.Locale]
      )(LocalSession.apply _)
    }

    def jsObjectLocalSession(obj: io.flow.session.v0.models.LocalSession): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> io.flow.reference.v0.models.json.jsObjectCountry(obj.country),
        "currency" -> io.flow.reference.v0.models.json.jsObjectCurrency(obj.currency),
        "language" -> io.flow.reference.v0.models.json.jsObjectLanguage(obj.language),
        "locale" -> io.flow.reference.v0.models.json.jsObjectLocale(obj.locale)
      )
    }

    implicit def jsonWritesSessionLocalSession: play.api.libs.json.Writes[LocalSession] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.LocalSession] {
        def writes(obj: io.flow.session.v0.models.LocalSession) = {
          jsObjectLocalSession(obj)
        }
      }
    }

    implicit def jsonReadsSessionOrganizationSession: play.api.libs.json.Reads[OrganizationSession] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[String] and
        (__ \ "visitor").read[io.flow.session.v0.models.SessionVisitor] and
        (__ \ "visit").read[io.flow.session.v0.models.SessionVisit] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "attributes").read[Map[String, String]] and
        (__ \ "ip").readNullable[String] and
        (__ \ "local").readNullable[io.flow.session.v0.models.LocalSession] and
        (__ \ "geo").readNullable[io.flow.session.v0.models.SessionGeo]
      )(OrganizationSession.apply _)
    }

    def jsObjectOrganizationSession(obj: io.flow.session.v0.models.OrganizationSession): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "visitor" -> jsObjectSessionVisitor(obj.visitor),
        "visit" -> jsObjectSessionVisit(obj.visit),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString),
        "attributes" -> play.api.libs.json.Json.toJson(obj.attributes)
      ) ++ (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.local match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("local" -> jsObjectLocalSession(x))
      }) ++
      (obj.geo match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("geo" -> jsObjectSessionGeo(x))
      })
    }

    implicit def jsonReadsSessionOrganizationSessionAuthorization: play.api.libs.json.Reads[OrganizationSessionAuthorization] = {
      (
        (__ \ "organization").read[io.flow.common.v0.models.OrganizationReference] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment]
      )(OrganizationSessionAuthorization.apply _)
    }

    def jsObjectOrganizationSessionAuthorization(obj: io.flow.session.v0.models.OrganizationSessionAuthorization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganizationReference(obj.organization),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      )
    }

    implicit def jsonReadsSessionSessionAuthorizationForm: play.api.libs.json.Reads[SessionAuthorizationForm] = {
      (__ \ "session").read[String].map { x => new SessionAuthorizationForm(session = x) }
    }

    def jsObjectSessionAuthorizationForm(obj: io.flow.session.v0.models.SessionAuthorizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "session" -> play.api.libs.json.JsString(obj.session)
      )
    }

    implicit def jsonWritesSessionSessionAuthorizationForm: play.api.libs.json.Writes[SessionAuthorizationForm] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionAuthorizationForm] {
        def writes(obj: io.flow.session.v0.models.SessionAuthorizationForm) = {
          jsObjectSessionAuthorizationForm(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionExpirationConfig: play.api.libs.json.Reads[SessionExpirationConfig] = {
      (
        (__ \ "unit").read[io.flow.common.v0.models.UnitOfTime] and
        (__ \ "value").read[Long]
      )(SessionExpirationConfig.apply _)
    }

    def jsObjectSessionExpirationConfig(obj: io.flow.session.v0.models.SessionExpirationConfig): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "unit" -> play.api.libs.json.JsString(obj.unit.toString),
        "value" -> play.api.libs.json.JsNumber(obj.value)
      )
    }

    implicit def jsonWritesSessionSessionExpirationConfig: play.api.libs.json.Writes[SessionExpirationConfig] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionExpirationConfig] {
        def writes(obj: io.flow.session.v0.models.SessionExpirationConfig) = {
          jsObjectSessionExpirationConfig(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionForm: play.api.libs.json.Reads[SessionForm] = {
      (
        (__ \ "ip").readNullable[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String] and
        (__ \ "locale").readNullable[String] and
        (__ \ "attributes").readNullable[Map[String, String]]
      )(SessionForm.apply _)
    }

    def jsObjectSessionForm(obj: io.flow.session.v0.models.SessionForm): play.api.libs.json.JsObject = {
      (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locale match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locale" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesSessionSessionForm: play.api.libs.json.Writes[SessionForm] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionForm] {
        def writes(obj: io.flow.session.v0.models.SessionForm) = {
          jsObjectSessionForm(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionGeo: play.api.libs.json.Reads[SessionGeo] = {
      (
        (__ \ "country").read[io.flow.reference.v0.models.Country] and
        (__ \ "currency").read[io.flow.reference.v0.models.Currency] and
        (__ \ "language").read[io.flow.reference.v0.models.Language] and
        (__ \ "locale").read[io.flow.reference.v0.models.Locale]
      )(SessionGeo.apply _)
    }

    def jsObjectSessionGeo(obj: io.flow.session.v0.models.SessionGeo): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "country" -> io.flow.reference.v0.models.json.jsObjectCountry(obj.country),
        "currency" -> io.flow.reference.v0.models.json.jsObjectCurrency(obj.currency),
        "language" -> io.flow.reference.v0.models.json.jsObjectLanguage(obj.language),
        "locale" -> io.flow.reference.v0.models.json.jsObjectLocale(obj.locale)
      )
    }

    implicit def jsonWritesSessionSessionGeo: play.api.libs.json.Writes[SessionGeo] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionGeo] {
        def writes(obj: io.flow.session.v0.models.SessionGeo) = {
          jsObjectSessionGeo(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionPutForm: play.api.libs.json.Reads[SessionPutForm] = {
      (
        (__ \ "ip").readNullable[String] and
        (__ \ "experience").readNullable[String] and
        (__ \ "country").readNullable[String] and
        (__ \ "currency").readNullable[String] and
        (__ \ "language").readNullable[String] and
        (__ \ "locale").readNullable[String] and
        (__ \ "attributes").readNullable[Map[String, String]]
      )(SessionPutForm.apply _)
    }

    def jsObjectSessionPutForm(obj: io.flow.session.v0.models.SessionPutForm): play.api.libs.json.JsObject = {
      (obj.ip match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("ip" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.experience match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("experience" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.country match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("country" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.currency match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("currency" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.language match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("language" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.locale match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("locale" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.attributes match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("attributes" -> play.api.libs.json.Json.toJson(x))
      })
    }

    implicit def jsonWritesSessionSessionPutForm: play.api.libs.json.Writes[SessionPutForm] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionPutForm] {
        def writes(obj: io.flow.session.v0.models.SessionPutForm) = {
          jsObjectSessionPutForm(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionVisit: play.api.libs.json.Reads[SessionVisit] = {
      (
        (__ \ "id").read[String] and
        (__ \ "expires_at").read[_root_.org.joda.time.DateTime]
      )(SessionVisit.apply _)
    }

    def jsObjectSessionVisit(obj: io.flow.session.v0.models.SessionVisit): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "expires_at" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiresAt))
      )
    }

    implicit def jsonWritesSessionSessionVisit: play.api.libs.json.Writes[SessionVisit] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionVisit] {
        def writes(obj: io.flow.session.v0.models.SessionVisit) = {
          jsObjectSessionVisit(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionVisitor: play.api.libs.json.Reads[SessionVisitor] = {
      (__ \ "id").read[String].map { x => new SessionVisitor(id = x) }
    }

    def jsObjectSessionVisitor(obj: io.flow.session.v0.models.SessionVisitor): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id)
      )
    }

    implicit def jsonWritesSessionSessionVisitor: play.api.libs.json.Writes[SessionVisitor] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionVisitor] {
        def writes(obj: io.flow.session.v0.models.SessionVisitor) = {
          jsObjectSessionVisitor(obj)
        }
      }
    }

    implicit def jsonReadsSessionSession: play.api.libs.json.Reads[Session] = new play.api.libs.json.Reads[Session] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[Session] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[Session] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "organization_session" => js.validate[io.flow.session.v0.models.OrganizationSession]
          case other => play.api.libs.json.JsSuccess(io.flow.session.v0.models.SessionUndefinedType(other))
        }
      }
    }

    def jsObjectSession(obj: io.flow.session.v0.models.Session): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.session.v0.models.OrganizationSession => jsObjectOrganizationSession(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionSession: play.api.libs.json.Writes[Session] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.Session] {
        def writes(obj: io.flow.session.v0.models.Session) = {
          jsObjectSession(obj)
        }
      }
    }

    implicit def jsonReadsSessionSessionAuthorization: play.api.libs.json.Reads[SessionAuthorization] = new play.api.libs.json.Reads[SessionAuthorization] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[SessionAuthorization] = {
        (js \ "discriminator").asOpt[String].getOrElse { sys.error("Union[SessionAuthorization] requires a discriminator named 'discriminator' - this field was not found in the Json Value") } match {
          case "organization_session_authorization" => js.validate[io.flow.session.v0.models.OrganizationSessionAuthorization]
          case other => play.api.libs.json.JsSuccess(io.flow.session.v0.models.SessionAuthorizationUndefinedType(other))
        }
      }
    }

    def jsObjectSessionAuthorization(obj: io.flow.session.v0.models.SessionAuthorization): play.api.libs.json.JsObject = {
      obj match {
        case x: io.flow.session.v0.models.OrganizationSessionAuthorization => jsObjectOrganizationSessionAuthorization(x) ++ play.api.libs.json.Json.obj("discriminator" -> "organization_session_authorization")
        case other => {
          sys.error(s"The type[${other.getClass.getName}] has no JSON writer")
        }
      }
    }

    implicit def jsonWritesSessionSessionAuthorization: play.api.libs.json.Writes[SessionAuthorization] = {
      new play.api.libs.json.Writes[io.flow.session.v0.models.SessionAuthorization] {
        def writes(obj: io.flow.session.v0.models.SessionAuthorization) = {
          jsObjectSessionAuthorization(obj)
        }
      }
    }
  }
}

package io.flow.session.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.session.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )



  }

}


package io.flow.session.v0 {

  object Constants {

    val Namespace = "io.flow.session.v0"
    val UserAgent = "apibuilder:0.12.61 https://app.apibuilder.io/flow/session/0.3.82/play_2_6_client"
    val Version = "0.3.82"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.session.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.session.v0.Client")

    logger.info(s"Initializing io.flow.session.v0.Client for url $baseUrl")

    def sessionAuthorizations: SessionAuthorizations = SessionAuthorizations

    def sessions: Sessions = Sessions

    object SessionAuthorizations extends SessionAuthorizations {
      override def post(
        sessionAuthorizationForm: io.flow.session.v0.models.SessionAuthorizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.SessionAuthorization] = {
        val payload = play.api.libs.json.Json.toJson(sessionAuthorizationForm)

        _executeRequest("POST", s"/authorizations/sessions", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.SessionAuthorization", r, _.validate[io.flow.session.v0.models.SessionAuthorization])
          case r if r.status == 401 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }
    }

    object Sessions extends Sessions {
      override def getBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        _executeRequest("GET", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404")
        }
      }

      override def postOrganizationsByOrganization(
        organization: String,
        sessionForm: io.flow.session.v0.models.SessionForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession] = {
        val payload = play.api.libs.json.Json.toJson(sessionForm)

        _executeRequest("POST", s"/sessions/organizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.OrganizationSession", r, _.validate[io.flow.session.v0.models.OrganizationSession])
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }

      override def putOrganizationsBySessionAndOrganization(
        session: String,
        organization: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/organizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.OrganizationSession", r, _.validate[io.flow.session.v0.models.OrganizationSession])
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 422")
        }
      }

      override def putBySession(
        session: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def putResetBySession(
        session: String,
        sessionPutForm: io.flow.session.v0.models.SessionPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session] = {
        val payload = play.api.libs.json.Json.toJson(sessionPutForm)

        _executeRequest("PUT", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}/reset", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.session.v0.Client.parseJson("io.flow.session.v0.models.Session", r, _.validate[io.flow.session.v0.models.Session])
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.session.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 404, 422")
        }
      }

      override def deleteBySession(
        session: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/sessions/${play.utils.UriEncoding.encodePathSegment(session, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.session.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.session.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).withHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.session.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def sessionAuthorizations: io.flow.session.v0.SessionAuthorizations
      def sessions: io.flow.session.v0.Sessions
    }

  }

  trait SessionAuthorizations {
    def post(
      sessionAuthorizationForm: io.flow.session.v0.models.SessionAuthorizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.SessionAuthorization]
  }

  trait Sessions {
    def getBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    def postOrganizationsByOrganization(
      organization: String,
      sessionForm: io.flow.session.v0.models.SessionForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession]

    def putOrganizationsBySessionAndOrganization(
      session: String,
      organization: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.OrganizationSession]

    def putBySession(
      session: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    /**
     * Resets the session based on the provided geo parameters.
     */
    def putResetBySession(
      session: String,
      sessionPutForm: io.flow.session.v0.models.SessionPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.session.v0.models.Session]

    def deleteBySession(
      session: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.reference.v0.models.json._
    import io.flow.session.v0.models.json._

    case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.session.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}
