/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.3.66
 * apibuilder:0.12.61 https://app.apibuilder.io/flow/organization/0.3.66/play_2_6_client
 */
package io.flow.organization.v0.models {

  /**
   * An invitation via email to a user to join this organization. The user will then
   * walk through a user login/registration process and will immediately become a
   * member of the organization.
   * 
   * @param email The email address to which we send this invitation
   * @param expiration The date / time on which this token expires. Current default is for tokens to
   *        live for 1 week
   */
  case class Invitation(
    id: String,
    organization: io.flow.common.v0.models.ExpandableOrganization,
    email: String,
    name: io.flow.common.v0.models.Name,
    role: io.flow.common.v0.models.Role,
    expiration: _root_.org.joda.time.DateTime
  )

  /**
   * Returns information as to why a particular invitation could not be accepted.
   */
  case class InvitationError(
    code: io.flow.organization.v0.models.InvitationErrorCode,
    messages: Seq[String]
  )

  case class InvitationForm(
    organization: String,
    email: String,
    name: _root_.scala.Option[io.flow.common.v0.models.Name] = None,
    role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member
  )

  case class InvitationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    invitation: io.flow.organization.v0.models.Invitation
  )

  /**
   * Represents the users that are part of this organization. Primary purpose is to
   * manage which users have access to the organization's data and to provide a
   * simple user interface to assign roles and permissions to each member of the
   * organization
   */
  case class Membership(
    id: String,
    organization: io.flow.common.v0.models.ExpandableOrganization,
    user: io.flow.common.v0.models.ExpandableUser,
    role: io.flow.common.v0.models.Role
  )

  /**
   * Top level resource to create a membership.
   * 
   * @param organization The id of the organization
   * @param user The id of the user to add to this organization
   */
  case class MembershipForm(
    organization: String,
    user: String,
    role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member
  )

  /**
   * Top level resource to create a membership.
   */
  case class MembershipPutForm(
    role: io.flow.common.v0.models.Role = io.flow.common.v0.models.Role.Member
  )

  case class MembershipVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    membership: io.flow.organization.v0.models.Membership
  )

  /**
   * Defines the data used for broad authorization of user access to org level data
   */
  case class OrganizationAuthorization(
    role: io.flow.common.v0.models.Role,
    environment: io.flow.common.v0.models.Environment
  )

  case class OrganizationAuthorizationForm(
    organization: String,
    environment: io.flow.common.v0.models.Environment
  )

  /**
   * Either id or name is required.
   * 
   * @param id Defaults to a URL safe and unique version of the name
   * @param name Defaults to the id
   * @param parentId When creating an organization in the test environment, you must specify your
   *        production organization id.
   */
  case class OrganizationForm(
    id: _root_.scala.Option[String] = None,
    name: _root_.scala.Option[String] = None,
    environment: io.flow.common.v0.models.Environment = io.flow.common.v0.models.Environment.Production,
    parentId: _root_.scala.Option[String] = None
  )

  /**
   * Data required to upsert an organization.
   * 
   * @param name Defaults to the id
   * @param environment If updating, defaults to the current environment. If creating, defaults to
   *        production
   * @param parentId When creating an organization in the test environment, you must specify your
   *        production organization id.
   */
  case class OrganizationPutForm(
    name: _root_.scala.Option[String] = None,
    environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
    parentId: _root_.scala.Option[String] = None
  )

  case class OrganizationVersion(
    id: String,
    timestamp: _root_.org.joda.time.DateTime,
    `type`: io.flow.common.v0.models.ChangeType,
    organization: io.flow.common.v0.models.Organization
  )

  case class RegionSetting(
    id: String,
    region: io.flow.reference.v0.models.Region,
    status: io.flow.common.v0.models.AvailabilityStatus
  )

  /**
   * @param regionId The id of the region. Case insensitive. See
   *        https://api.flow.io/reference/regions
   */
  case class RegionSettingForm(
    regionId: String,
    status: io.flow.common.v0.models.AvailabilityStatus
  )

  sealed trait InvitationErrorCode extends _root_.scala.Product with _root_.scala.Serializable

  object InvitationErrorCode {

    case object Expired extends InvitationErrorCode { override def toString = "expired" }
    case object InvalidEmail extends InvitationErrorCode { override def toString = "invalid_email" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    case class UNDEFINED(override val toString: String) extends InvitationErrorCode

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[InvitationErrorCode] = scala.List(Expired, InvalidEmail)

    private[this]
    val byName: Map[String, InvitationErrorCode] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): InvitationErrorCode = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[InvitationErrorCode] = byName.get(value.toLowerCase)

  }

}

package io.flow.organization.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

    private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
      def writes(x: java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      import org.joda.time.format.ISODateTimeFormat.dateTimeParser
      dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
      def writes(x: org.joda.time.DateTime) = {
        import org.joda.time.format.ISODateTimeFormat.dateTime
        val str = dateTime.print(x)
        JsString(str)
      }
    }

    implicit val jsonReadsOrganizationInvitationErrorCode = new play.api.libs.json.Reads[io.flow.organization.v0.models.InvitationErrorCode] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.flow.organization.v0.models.InvitationErrorCode] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.InvitationErrorCode(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.flow.organization.v0.models.InvitationErrorCode(v))
              case err: play.api.libs.json.JsError => err
            }
          }
        }
      }
    }

    def jsonWritesOrganizationInvitationErrorCode(obj: io.flow.organization.v0.models.InvitationErrorCode) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectInvitationErrorCode(obj: io.flow.organization.v0.models.InvitationErrorCode) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesOrganizationInvitationErrorCode: play.api.libs.json.Writes[InvitationErrorCode] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.InvitationErrorCode] {
        def writes(obj: io.flow.organization.v0.models.InvitationErrorCode) = {
          jsonWritesOrganizationInvitationErrorCode(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationInvitation: play.api.libs.json.Reads[Invitation] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.common.v0.models.ExpandableOrganization] and
        (__ \ "email").read[String] and
        (__ \ "name").read[io.flow.common.v0.models.Name] and
        (__ \ "role").read[io.flow.common.v0.models.Role] and
        (__ \ "expiration").read[_root_.org.joda.time.DateTime]
      )(Invitation.apply _)
    }

    def jsObjectInvitation(obj: io.flow.organization.v0.models.Invitation): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectExpandableOrganization(obj.organization),
        "email" -> play.api.libs.json.JsString(obj.email),
        "name" -> io.flow.common.v0.models.json.jsObjectName(obj.name),
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "expiration" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.expiration))
      )
    }

    implicit def jsonWritesOrganizationInvitation: play.api.libs.json.Writes[Invitation] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.Invitation] {
        def writes(obj: io.flow.organization.v0.models.Invitation) = {
          jsObjectInvitation(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationInvitationError: play.api.libs.json.Reads[InvitationError] = {
      (
        (__ \ "code").read[io.flow.organization.v0.models.InvitationErrorCode] and
        (__ \ "messages").read[Seq[String]]
      )(InvitationError.apply _)
    }

    def jsObjectInvitationError(obj: io.flow.organization.v0.models.InvitationError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "code" -> play.api.libs.json.JsString(obj.code.toString),
        "messages" -> play.api.libs.json.Json.toJson(obj.messages)
      )
    }

    implicit def jsonWritesOrganizationInvitationError: play.api.libs.json.Writes[InvitationError] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.InvitationError] {
        def writes(obj: io.flow.organization.v0.models.InvitationError) = {
          jsObjectInvitationError(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationInvitationForm: play.api.libs.json.Reads[InvitationForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "email").read[String] and
        (__ \ "name").readNullable[io.flow.common.v0.models.Name] and
        (__ \ "role").read[io.flow.common.v0.models.Role]
      )(InvitationForm.apply _)
    }

    def jsObjectInvitationForm(obj: io.flow.organization.v0.models.InvitationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "email" -> play.api.libs.json.JsString(obj.email),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      ) ++ (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> io.flow.common.v0.models.json.jsObjectName(x))
      })
    }

    implicit def jsonWritesOrganizationInvitationForm: play.api.libs.json.Writes[InvitationForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.InvitationForm] {
        def writes(obj: io.flow.organization.v0.models.InvitationForm) = {
          jsObjectInvitationForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationInvitationVersion: play.api.libs.json.Reads[InvitationVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "invitation").read[io.flow.organization.v0.models.Invitation]
      )(InvitationVersion.apply _)
    }

    def jsObjectInvitationVersion(obj: io.flow.organization.v0.models.InvitationVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "invitation" -> jsObjectInvitation(obj.invitation)
      )
    }

    implicit def jsonWritesOrganizationInvitationVersion: play.api.libs.json.Writes[InvitationVersion] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.InvitationVersion] {
        def writes(obj: io.flow.organization.v0.models.InvitationVersion) = {
          jsObjectInvitationVersion(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationMembership: play.api.libs.json.Reads[Membership] = {
      (
        (__ \ "id").read[String] and
        (__ \ "organization").read[io.flow.common.v0.models.ExpandableOrganization] and
        (__ \ "user").read[io.flow.common.v0.models.ExpandableUser] and
        (__ \ "role").read[io.flow.common.v0.models.Role]
      )(Membership.apply _)
    }

    def jsObjectMembership(obj: io.flow.organization.v0.models.Membership): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "organization" -> io.flow.common.v0.models.json.jsObjectExpandableOrganization(obj.organization),
        "user" -> io.flow.common.v0.models.json.jsObjectExpandableUser(obj.user),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesOrganizationMembership: play.api.libs.json.Writes[Membership] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.Membership] {
        def writes(obj: io.flow.organization.v0.models.Membership) = {
          jsObjectMembership(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationMembershipForm: play.api.libs.json.Reads[MembershipForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "user").read[String] and
        (__ \ "role").read[io.flow.common.v0.models.Role]
      )(MembershipForm.apply _)
    }

    def jsObjectMembershipForm(obj: io.flow.organization.v0.models.MembershipForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "user" -> play.api.libs.json.JsString(obj.user),
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesOrganizationMembershipForm: play.api.libs.json.Writes[MembershipForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.MembershipForm] {
        def writes(obj: io.flow.organization.v0.models.MembershipForm) = {
          jsObjectMembershipForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationMembershipPutForm: play.api.libs.json.Reads[MembershipPutForm] = {
      (__ \ "role").read[io.flow.common.v0.models.Role].map { x => new MembershipPutForm(role = x) }
    }

    def jsObjectMembershipPutForm(obj: io.flow.organization.v0.models.MembershipPutForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "role" -> play.api.libs.json.JsString(obj.role.toString)
      )
    }

    implicit def jsonWritesOrganizationMembershipPutForm: play.api.libs.json.Writes[MembershipPutForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.MembershipPutForm] {
        def writes(obj: io.flow.organization.v0.models.MembershipPutForm) = {
          jsObjectMembershipPutForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationMembershipVersion: play.api.libs.json.Reads[MembershipVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "membership").read[io.flow.organization.v0.models.Membership]
      )(MembershipVersion.apply _)
    }

    def jsObjectMembershipVersion(obj: io.flow.organization.v0.models.MembershipVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "membership" -> jsObjectMembership(obj.membership)
      )
    }

    implicit def jsonWritesOrganizationMembershipVersion: play.api.libs.json.Writes[MembershipVersion] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.MembershipVersion] {
        def writes(obj: io.flow.organization.v0.models.MembershipVersion) = {
          jsObjectMembershipVersion(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationOrganizationAuthorization: play.api.libs.json.Reads[OrganizationAuthorization] = {
      (
        (__ \ "role").read[io.flow.common.v0.models.Role] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment]
      )(OrganizationAuthorization.apply _)
    }

    def jsObjectOrganizationAuthorization(obj: io.flow.organization.v0.models.OrganizationAuthorization): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "role" -> play.api.libs.json.JsString(obj.role.toString),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      )
    }

    implicit def jsonWritesOrganizationOrganizationAuthorization: play.api.libs.json.Writes[OrganizationAuthorization] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.OrganizationAuthorization] {
        def writes(obj: io.flow.organization.v0.models.OrganizationAuthorization) = {
          jsObjectOrganizationAuthorization(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationOrganizationAuthorizationForm: play.api.libs.json.Reads[OrganizationAuthorizationForm] = {
      (
        (__ \ "organization").read[String] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment]
      )(OrganizationAuthorizationForm.apply _)
    }

    def jsObjectOrganizationAuthorizationForm(obj: io.flow.organization.v0.models.OrganizationAuthorizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "organization" -> play.api.libs.json.JsString(obj.organization),
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      )
    }

    implicit def jsonWritesOrganizationOrganizationAuthorizationForm: play.api.libs.json.Writes[OrganizationAuthorizationForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.OrganizationAuthorizationForm] {
        def writes(obj: io.flow.organization.v0.models.OrganizationAuthorizationForm) = {
          jsObjectOrganizationAuthorizationForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationOrganizationForm: play.api.libs.json.Reads[OrganizationForm] = {
      (
        (__ \ "id").readNullable[String] and
        (__ \ "name").readNullable[String] and
        (__ \ "environment").read[io.flow.common.v0.models.Environment] and
        (__ \ "parent_id").readNullable[String]
      )(OrganizationForm.apply _)
    }

    def jsObjectOrganizationForm(obj: io.flow.organization.v0.models.OrganizationForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "environment" -> play.api.libs.json.JsString(obj.environment.toString)
      ) ++ (obj.id match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("id" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.parentId match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("parent_id" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrganizationOrganizationForm: play.api.libs.json.Writes[OrganizationForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.OrganizationForm] {
        def writes(obj: io.flow.organization.v0.models.OrganizationForm) = {
          jsObjectOrganizationForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationOrganizationPutForm: play.api.libs.json.Reads[OrganizationPutForm] = {
      (
        (__ \ "name").readNullable[String] and
        (__ \ "environment").readNullable[io.flow.common.v0.models.Environment] and
        (__ \ "parent_id").readNullable[String]
      )(OrganizationPutForm.apply _)
    }

    def jsObjectOrganizationPutForm(obj: io.flow.organization.v0.models.OrganizationPutForm): play.api.libs.json.JsObject = {
      (obj.name match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("name" -> play.api.libs.json.JsString(x))
      }) ++
      (obj.environment match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("environment" -> play.api.libs.json.JsString(x.toString))
      }) ++
      (obj.parentId match {
        case None => play.api.libs.json.Json.obj()
        case Some(x) => play.api.libs.json.Json.obj("parent_id" -> play.api.libs.json.JsString(x))
      })
    }

    implicit def jsonWritesOrganizationOrganizationPutForm: play.api.libs.json.Writes[OrganizationPutForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.OrganizationPutForm] {
        def writes(obj: io.flow.organization.v0.models.OrganizationPutForm) = {
          jsObjectOrganizationPutForm(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationOrganizationVersion: play.api.libs.json.Reads[OrganizationVersion] = {
      (
        (__ \ "id").read[String] and
        (__ \ "timestamp").read[_root_.org.joda.time.DateTime] and
        (__ \ "type").read[io.flow.common.v0.models.ChangeType] and
        (__ \ "organization").read[io.flow.common.v0.models.Organization]
      )(OrganizationVersion.apply _)
    }

    def jsObjectOrganizationVersion(obj: io.flow.organization.v0.models.OrganizationVersion): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "timestamp" -> play.api.libs.json.JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(obj.timestamp)),
        "type" -> play.api.libs.json.JsString(obj.`type`.toString),
        "organization" -> io.flow.common.v0.models.json.jsObjectOrganization(obj.organization)
      )
    }

    implicit def jsonWritesOrganizationOrganizationVersion: play.api.libs.json.Writes[OrganizationVersion] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.OrganizationVersion] {
        def writes(obj: io.flow.organization.v0.models.OrganizationVersion) = {
          jsObjectOrganizationVersion(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationRegionSetting: play.api.libs.json.Reads[RegionSetting] = {
      (
        (__ \ "id").read[String] and
        (__ \ "region").read[io.flow.reference.v0.models.Region] and
        (__ \ "status").read[io.flow.common.v0.models.AvailabilityStatus]
      )(RegionSetting.apply _)
    }

    def jsObjectRegionSetting(obj: io.flow.organization.v0.models.RegionSetting): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "id" -> play.api.libs.json.JsString(obj.id),
        "region" -> io.flow.reference.v0.models.json.jsObjectRegion(obj.region),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      )
    }

    implicit def jsonWritesOrganizationRegionSetting: play.api.libs.json.Writes[RegionSetting] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.RegionSetting] {
        def writes(obj: io.flow.organization.v0.models.RegionSetting) = {
          jsObjectRegionSetting(obj)
        }
      }
    }

    implicit def jsonReadsOrganizationRegionSettingForm: play.api.libs.json.Reads[RegionSettingForm] = {
      (
        (__ \ "region_id").read[String] and
        (__ \ "status").read[io.flow.common.v0.models.AvailabilityStatus]
      )(RegionSettingForm.apply _)
    }

    def jsObjectRegionSettingForm(obj: io.flow.organization.v0.models.RegionSettingForm): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "region_id" -> play.api.libs.json.JsString(obj.regionId),
        "status" -> play.api.libs.json.JsString(obj.status.toString)
      )
    }

    implicit def jsonWritesOrganizationRegionSettingForm: play.api.libs.json.Writes[RegionSettingForm] = {
      new play.api.libs.json.Writes[io.flow.organization.v0.models.RegionSettingForm] {
        def writes(obj: io.flow.organization.v0.models.RegionSettingForm) = {
          jsObjectRegionSettingForm(obj)
        }
      }
    }
  }
}

package io.flow.organization.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}
    import org.joda.time.{DateTime, LocalDate}
    import org.joda.time.format.ISODateTimeFormat
    import io.flow.organization.v0.models._

    // Type: date-time-iso8601
    implicit val pathBindableTypeDateTimeIso8601 = new PathBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    implicit val queryStringBindableTypeDateTimeIso8601 = new QueryStringBindable.Parsing[org.joda.time.DateTime](
      ISODateTimeFormat.dateTimeParser.parseDateTime(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date time $key. Example: 2014-04-29T11:56:52Z"
    )

    // Type: date-iso8601
    implicit val pathBindableTypeDateIso8601 = new PathBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    implicit val queryStringBindableTypeDateIso8601 = new QueryStringBindable.Parsing[org.joda.time.LocalDate](
      ISODateTimeFormat.yearMonthDay.parseLocalDate(_), _.toString, (key: String, e: _root_.java.lang.Exception) => s"Error parsing date $key. Example: 2014-04-29"
    )

    // Enum: InvitationErrorCode
    private[this] val enumInvitationErrorCodeNotFound = (key: String, e: _root_.java.lang.Exception) => s"Unrecognized $key, should be one of ${io.flow.organization.v0.models.InvitationErrorCode.all.mkString(", ")}"

    implicit val pathBindableEnumInvitationErrorCode = new PathBindable.Parsing[io.flow.organization.v0.models.InvitationErrorCode] (
      InvitationErrorCode.fromString(_).get, _.toString, enumInvitationErrorCodeNotFound
    )

    implicit val queryStringBindableEnumInvitationErrorCode = new QueryStringBindable.Parsing[io.flow.organization.v0.models.InvitationErrorCode](
      InvitationErrorCode.fromString(_).get, _.toString, enumInvitationErrorCodeNotFound
    )

  }

}


package io.flow.organization.v0 {

  object Constants {

    val Namespace = "io.flow.organization.v0"
    val UserAgent = "apibuilder:0.12.61 https://app.apibuilder.io/flow/organization/0.3.66/play_2_6_client"
    val Version = "0.3.66"
    val VersionMajor = 0

  }

  class Client(
    ws: play.api.libs.ws.WSClient,
    val baseUrl: String,
    auth: scala.Option[io.flow.organization.v0.Authorization] = None,
    defaultHeaders: Seq[(String, String)] = Nil
  ) extends interfaces.Client {
    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.reference.v0.models.json._

    private[this] val logger = play.api.Logger("io.flow.organization.v0.Client")

    logger.info(s"Initializing io.flow.organization.v0.Client for url $baseUrl")

    def invitations: Invitations = Invitations

    def memberships: Memberships = Memberships

    def organizationAuthorizations: OrganizationAuthorizations = OrganizationAuthorizations

    def organizations: Organizations = Organizations

    object Invitations extends Invitations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[String] = None,
        email: _root_.scala.Option[String] = None,
        token: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Invitation]] = {
        val queryParameters = Seq(
          organization.map("organization" -> _),
          email.map("email" -> _),
          token.map("token" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.Invitation]", r, _.validate[Seq[io.flow.organization.v0.models.Invitation]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        invitation: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.InvitationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          invitation.getOrElse(Nil).map("invitation" -> _)

        _executeRequest("GET", s"/invitations/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.InvitationVersion]", r, _.validate[Seq[io.flow.organization.v0.models.InvitationVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        invitationForm: io.flow.organization.v0.models.InvitationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val payload = play.api.libs.json.Json.toJson(invitationForm)

        _executeRequest("POST", s"/invitations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def getTokensByToken(
        token: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/invitations/tokens/${play.utils.UriEncoding.encodePathSegment(token, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Invitation", r, _.validate[io.flow.organization.v0.models.Invitation])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def putTokensByToken(
        token: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        _executeRequest("PUT", s"/invitations/tokens/${play.utils.UriEncoding.encodePathSegment(token, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.InvitationErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/invitations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404, 422")
        }
      }
    }

    object Memberships extends Memberships {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        user: _root_.scala.Option[String] = None,
        organization: _root_.scala.Option[String] = None,
        role: _root_.scala.Option[Seq[io.flow.common.v0.models.Role]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "-created_at",
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Membership]] = {
        val queryParameters = Seq(
          user.map("user" -> _),
          organization.map("organization" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          role.getOrElse(Nil).map("role" -> _.toString) ++
          expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.Membership]", r, _.validate[Seq[io.flow.organization.v0.models.Membership]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        membership: _root_.scala.Option[Seq[String]] = None,
        user: _root_.scala.Option[String] = None,
        organization: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.MembershipVersion]] = {
        val queryParameters = Seq(
          user.map("user" -> _),
          organization.map("organization" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          membership.getOrElse(Nil).map("membership" -> _)

        _executeRequest("GET", s"/memberships/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.MembershipVersion]", r, _.validate[Seq[io.flow.organization.v0.models.MembershipVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        expand: _root_.scala.Option[Seq[String]] = None,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val queryParameters = expand.getOrElse(Nil).map("expand" -> _)

        _executeRequest("GET", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def post(
        membershipForm: io.flow.organization.v0.models.MembershipForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipForm)

        _executeRequest("POST", s"/memberships", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        membershipPutForm: io.flow.organization.v0.models.MembershipPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership] = {
        val payload = play.api.libs.json.Json.toJson(membershipPutForm)

        _executeRequest("PUT", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.Membership", r, _.validate[io.flow.organization.v0.models.Membership])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/memberships/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404, 422")
        }
      }
    }

    object OrganizationAuthorizations extends OrganizationAuthorizations {
      override def post(
        organizationAuthorizationForm: io.flow.organization.v0.models.OrganizationAuthorizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization] = {
        val payload = play.api.libs.json.Json.toJson(organizationAuthorizationForm)

        _executeRequest("POST", s"/organization-authorizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationAuthorization", r, _.validate[io.flow.organization.v0.models.OrganizationAuthorization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 422")
        }
      }

      override def getByOrganization(
        organization: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization] = {
        _executeRequest("GET", s"/organization-authorizations/${play.utils.UriEncoding.encodePathSegment(organization, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.OrganizationAuthorization", r, _.validate[io.flow.organization.v0.models.OrganizationAuthorization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }
    }

    object Organizations extends Organizations {
      override def get(
        id: _root_.scala.Option[Seq[String]] = None,
        name: _root_.scala.Option[String] = None,
        environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
        parent: _root_.scala.Option[String] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "name",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Organization]] = {
        val queryParameters = Seq(
          name.map("name" -> _),
          environment.map("environment" -> _.toString),
          parent.map("parent" -> _),
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _)

        _executeRequest("GET", s"/organizations", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.common.v0.models.Organization]", r, _.validate[Seq[io.flow.common.v0.models.Organization]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getVersions(
        id: _root_.scala.Option[Seq[String]] = None,
        organization: _root_.scala.Option[Seq[String]] = None,
        limit: Long = 25,
        offset: Long = 0,
        sort: String = "journal_timestamp",
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.OrganizationVersion]] = {
        val queryParameters = Seq(
          Some("limit" -> limit.toString),
          Some("offset" -> offset.toString),
          Some("sort" -> sort)
        ).flatten ++
          id.getOrElse(Nil).map("id" -> _) ++
          organization.getOrElse(Nil).map("organization" -> _)

        _executeRequest("GET", s"/organizations/versions", queryParameters = queryParameters, requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.OrganizationVersion]", r, _.validate[Seq[io.flow.organization.v0.models.OrganizationVersion]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401")
        }
      }

      override def getById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getSettingsAndCurrenciesByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/currencies", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Currency]", r, _.validate[Seq[io.flow.reference.v0.models.Currency]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getSettingsAndRegionsAndCountriesAndAvailableByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions/countries/available", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.reference.v0.models.Country]", r, _.validate[Seq[io.flow.reference.v0.models.Country]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def getSettingsAndRegionsByOrganizationId(
        organizationId: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.RegionSetting]] = {
        _executeRequest("GET", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions", requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("Seq[io.flow.organization.v0.models.RegionSetting]", r, _.validate[Seq[io.flow.organization.v0.models.RegionSetting]])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 401, 404")
        }
      }

      override def putSettingsAndRegionsByOrganizationId(
        organizationId: String,
        regionSettingForm: io.flow.organization.v0.models.RegionSettingForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.RegionSetting] = {
        val payload = play.api.libs.json.Json.toJson(regionSettingForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.RegionSetting", r, _.validate[io.flow.organization.v0.models.RegionSetting])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.RegionSetting", r, _.validate[io.flow.organization.v0.models.RegionSetting])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 422")
        }
      }

      override def deleteSettingsAndRegionsByOrganizationIdAndId(
        organizationId: String,
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(organizationId, "UTF-8")}/settings/regions/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }

      override def post(
        organizationForm: io.flow.organization.v0.models.OrganizationForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationForm)

        _executeRequest("POST", s"/organizations", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 201, 401, 422")
        }
      }

      override def putById(
        id: String,
        organizationPutForm: io.flow.organization.v0.models.OrganizationPutForm,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization] = {
        val payload = play.api.libs.json.Json.toJson(organizationPutForm)

        _executeRequest("PUT", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", body = Some(payload), requestHeaders = requestHeaders).map {
          case r if r.status == 200 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 201 => _root_.io.flow.organization.v0.Client.parseJson("io.flow.common.v0.models.Organization", r, _.validate[io.flow.common.v0.models.Organization])
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 422 => throw io.flow.organization.v0.errors.GenericErrorResponse(r)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 200, 201, 401, 422")
        }
      }

      override def deleteById(
        id: String,
        requestHeaders: Seq[(String, String)] = Nil
      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit] = {
        _executeRequest("DELETE", s"/organizations/${play.utils.UriEncoding.encodePathSegment(id, "UTF-8")}", requestHeaders = requestHeaders).map {
          case r if r.status == 204 => ()
          case r if r.status == 401 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r if r.status == 404 => throw io.flow.organization.v0.errors.UnitResponse(r.status)
          case r => throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Unsupported response code[${r.status}]. Expected: 204, 401, 404")
        }
      }
    }

    def _requestHolder(path: String): play.api.libs.ws.WSRequest = {

      val holder = ws.url(baseUrl + path).withHttpHeaders(
        "User-Agent" -> Constants.UserAgent,
        "X-Apidoc-Version" -> Constants.Version,
        "X-Apidoc-Version-Major" -> Constants.VersionMajor.toString
      ).withHttpHeaders(defaultHeaders : _*)
      auth.fold(holder) {
        case Authorization.Basic(username, password) => {
          holder.withAuth(username, password.getOrElse(""), play.api.libs.ws.WSAuthScheme.BASIC)
        }
        case a => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }

    def _logRequest(method: String, req: play.api.libs.ws.WSRequest)(implicit ec: scala.concurrent.ExecutionContext): play.api.libs.ws.WSRequest = {
      val queryComponents = for {
        (name, values) <- req.queryString
        value <- values
      } yield s"$name=$value"
      val url = s"${req.url}${queryComponents.mkString("?", "&", "")}"
      auth.fold(logger.info(s"curl -X $method $url")) { _ =>
        logger.info(s"curl -X $method -u '[REDACTED]:' $url")
      }
      req
    }

    def _executeRequest(
      method: String,
      path: String,
      queryParameters: Seq[(String, String)] = Nil,
      requestHeaders: Seq[(String, String)] = Nil,
      body: Option[play.api.libs.json.JsValue] = None
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[play.api.libs.ws.WSResponse] = {
      method.toUpperCase match {
        case "GET" => {
          _logRequest("GET", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).get()
        }
        case "POST" => {
          _logRequest("POST", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).post(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PUT" => {
          _logRequest("PUT", _requestHolder(path).withHttpHeaders(_withJsonContentType(requestHeaders):_*).withQueryStringParameters(queryParameters:_*)).put(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "PATCH" => {
          _logRequest("PATCH", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).patch(body.getOrElse(play.api.libs.json.Json.obj()))
        }
        case "DELETE" => {
          _logRequest("DELETE", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).delete()
        }
         case "HEAD" => {
          _logRequest("HEAD", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).head()
        }
         case "OPTIONS" => {
          _logRequest("OPTIONS", _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*)).options()
        }
        case _ => {
          _logRequest(method, _requestHolder(path).withHttpHeaders(requestHeaders:_*).withQueryStringParameters(queryParameters:_*))
          sys.error("Unsupported method[%s]".format(method))
        }
      }
    }

    /**
     * Adds a Content-Type: application/json header unless the specified requestHeaders
     * already contain a Content-Type header
     */
    def _withJsonContentType(headers: Seq[(String, String)]): Seq[(String, String)] = {
      headers.find { _._1.toUpperCase == "CONTENT-TYPE" } match {
        case None => headers ++ Seq(("Content-Type" -> "application/json; charset=UTF-8"))
        case Some(_) => headers
      }
    }

  }

  object Client {

    def parseJson[T](
      className: String,
      r: play.api.libs.ws.WSResponse,
      f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
    ): T = {
      f(play.api.libs.json.Json.parse(r.body)) match {
        case play.api.libs.json.JsSuccess(x, _) => x
        case play.api.libs.json.JsError(errors) => {
          throw io.flow.organization.v0.errors.FailedRequest(r.status, s"Invalid json for class[" + className + "]: " + errors.mkString(" "))
        }
      }
    }

  }

  sealed trait Authorization extends _root_.scala.Product with _root_.scala.Serializable
  object Authorization {
    case class Basic(username: String, password: Option[String] = None) extends Authorization
  }

  package interfaces {

    trait Client {
      def baseUrl: String
      def invitations: io.flow.organization.v0.Invitations
      def memberships: io.flow.organization.v0.Memberships
      def organizationAuthorizations: io.flow.organization.v0.OrganizationAuthorizations
      def organizations: io.flow.organization.v0.Organizations
    }

  }

  trait Invitations {
    /**
     * Search invitations. Always paginated.
     * 
     * @param organization Find invitations for this organization
     * @param email Find invitations for this email
     * @param token Find invitation for this token
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[String] = None,
      email: _root_.scala.Option[String] = None,
      token: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Invitation]]

    /**
     * @param invitation Filter to versions for invitations with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      invitation: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.InvitationVersion]]

    /**
     * Returns information about a specific invitation.
     */
    def getById(
      id: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Create a new invitation.
     */
    def post(
      invitationForm: io.flow.organization.v0.models.InvitationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Lookup an invitation by its token.
     */
    def getTokensByToken(
      token: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Invitation]

    /**
     * Accepts the invitation w/ the specified token and the authenticated user.
     * Creating a membership record for this user within this organization. Invitations
     * are one time use only - you will get a validation error if the invitation has
     * previously been accepted or if the user's email addresses do not match the email
     * on the invite.
     */
    def putTokensByToken(
      token: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait Memberships {
    /**
     * Search memberships. Always paginated.
     * 
     * @param user Find memberships for this user id
     * @param organization Find memberships for this organization id
     * @param role Find memberships with these roles
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      user: _root_.scala.Option[String] = None,
      organization: _root_.scala.Option[String] = None,
      role: _root_.scala.Option[Seq[io.flow.common.v0.models.Role]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "-created_at",
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.Membership]]

    /**
     * @param membership Filter membership changes with any one of these ids.
     * @param user Filter membership changes for this user id
     * @param organization Filter membership changes for this organization id
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      membership: _root_.scala.Option[Seq[String]] = None,
      user: _root_.scala.Option[String] = None,
      organization: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.MembershipVersion]]

    /**
     * Returns information about a specific membership.
     */
    def getById(
      id: String,
      expand: _root_.scala.Option[Seq[String]] = None,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    /**
     * Create a new membership.
     */
    def post(
      membershipForm: io.flow.organization.v0.models.MembershipForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    /**
     * Change the role for a specific membership record. If the user already has the
     * specified role within the organization, does nothing.
     */
    def putById(
      id: String,
      membershipPutForm: io.flow.organization.v0.models.MembershipPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.Membership]

    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  trait OrganizationAuthorizations {
    /**
     * For the authorized user, if the specified organization exists, and the user is
     * an active member of this organization, returns the authorization data used
     * throughout APIs at Flow, including the user's role in that organization and the
     * organization environment. Otherwise, returns 401 - this indicates either the org
     * does not exist or the user does not have access to the org.
     */
    def post(
      organizationAuthorizationForm: io.flow.organization.v0.models.OrganizationAuthorizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization]

    /**
     * For the authorized user and specific organization, if the user is an active
     * member of this organization, returns the authorization data used throughout APIs
     * at Flow, including the user's role in that organization and the organization
     * environment.
     */
    def getByOrganization(
      organization: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.OrganizationAuthorization]
  }

  trait Organizations {
    /**
     * Search organizations. Always paginated.
     * 
     * @param name Find organizations with this name. Case insensitive. Exact match.
     * @param environment Find organizations with this environment
     * @param parent Find organizations that belong to this specified parent organization id. Case
     *        insensitive. Exact match.
     */
    def get(
      id: _root_.scala.Option[Seq[String]] = None,
      name: _root_.scala.Option[String] = None,
      environment: _root_.scala.Option[io.flow.common.v0.models.Environment] = None,
      parent: _root_.scala.Option[String] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "name",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.common.v0.models.Organization]]

    /**
     * Provides visibility into recent changes of each object, including deletion
     * 
     * @param organization Filter to organizations with any one of these ids.
     */
    def getVersions(
      id: _root_.scala.Option[Seq[String]] = None,
      organization: _root_.scala.Option[Seq[String]] = None,
      limit: Long = 25,
      offset: Long = 0,
      sort: String = "journal_timestamp",
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.OrganizationVersion]]

    /**
     * Returns information about a specific organization.
     */
    def getById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Returns currencies for a specific organization.
     */
    def getSettingsAndCurrenciesByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Currency]]

    /**
     * Returns the list of enabled countries based on the region settings for a
     * specific organization
     */
    def getSettingsAndRegionsAndCountriesAndAvailableByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.reference.v0.models.Country]]

    /**
     * Returns the region settings associated to a specific organization.
     */
    def getSettingsAndRegionsByOrganizationId(
      organizationId: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Seq[io.flow.organization.v0.models.RegionSetting]]

    /**
     * Updates or creates a region setting for a specific organization
     */
    def putSettingsAndRegionsByOrganizationId(
      organizationId: String,
      regionSettingForm: io.flow.organization.v0.models.RegionSettingForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.organization.v0.models.RegionSetting]

    /**
     * Removes the setting for this region for a specific organization
     */
    def deleteSettingsAndRegionsByOrganizationIdAndId(
      organizationId: String,
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]

    /**
     * Create a new organization.
     */
    def post(
      organizationForm: io.flow.organization.v0.models.OrganizationForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Update or create an organization with the specified id.
     */
    def putById(
      id: String,
      organizationPutForm: io.flow.organization.v0.models.OrganizationPutForm,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.flow.common.v0.models.Organization]

    /**
     * Delete the organization with this id
     */
    def deleteById(
      id: String,
      requestHeaders: Seq[(String, String)] = Nil
    )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Unit]
  }

  package errors {

    import io.flow.common.v0.models.json._
    import io.flow.error.v0.models.json._
    import io.flow.organization.v0.models.json._
    import io.flow.reference.v0.models.json._

    case class GenericErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val genericError = _root_.io.flow.organization.v0.Client.parseJson("io.flow.error.v0.models.GenericError", response, _.validate[io.flow.error.v0.models.GenericError])
    }

    case class InvitationErrorResponse(
      response: play.api.libs.ws.WSResponse,
      message: Option[String] = None
    ) extends Exception(message.getOrElse(response.status + ": " + response.body)){
      lazy val invitationError = _root_.io.flow.organization.v0.Client.parseJson("io.flow.organization.v0.models.InvitationError", response, _.validate[io.flow.organization.v0.models.InvitationError])
    }

    case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

    case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends _root_.java.lang.Exception(s"HTTP $responseCode: $message")

  }

}